class Solution:
    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:
        n, m = len(grid), len(grid[0])
        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
        color = [[0]*m for _ in range(n)]

        def invalid(nx, ny):
            if nx<0 or ny<0 or nx>=n or ny>=m:
                return True
            return False

        def dfs(row, col):
            val = 1
            stack = [(row, col)]
            while stack:
                x, y = stack.pop()
                for i, j in directions:
                    nx, ny = x+i, y+j
                    if not invalid(nx, ny) and grid[nx][ny]:
                        if not color[nx][ny]:
                            val += 1
                            color[nx][ny] = 1
                            stack.append((nx, ny))
            return val

        res = 0
        for row in range(n):
            for col in range(m):
                if grid[row][col] and not color[row][col]:
                    color[row][col] = 1
                    dfsval = dfs(row, col)
                    res = max(res, dfsval)
        return res
