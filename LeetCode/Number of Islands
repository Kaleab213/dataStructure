class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        n, m = len(grid), len(grid[0])
        color = [[0]*m for _ in range(n)]
        directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]
        res = 0

        def invalid(x: int, y:int) -> bool:
            if x < 0 or y < 0 or x >= n or y >= m:
                return True
            return False

        def dfs(row: int, col: int) -> None:
            color[row][col] = 1 
            for x, y in directions:
                nx, ny = x + row, y + col
                if not invalid(nx, ny) and grid[nx][ny] == "1" and not color[nx][ny]:
                    dfs(nx, ny)

        for row in range(n):
            for col in range(m):
                if grid[row][col] == "1" and not color[row][col]:
                    dfs(row, col)
                    res += 1

        return res
