class LRUCache:

    def __init__(self, capacity: int):
        self.capacity = capacity
        self.queue = []
        self.dict = {}

    def get(self, key: int) -> int:
        if key in self.dict:
            self.queue.remove(key)
            self.queue.append(key)
            return self.dict[key]
        return -1
        
    def put(self, key: int, value: int) -> None:

        if key in self.dict:
            self.dict[key] = value
            self.queue.remove(key)
            self.queue.append(key)
        elif len(self.queue) < self.capacity:
            self.queue.append(key)
            self.dict[key] = value
        else:
            lru = self.queue.pop(0)
            del self.dict[lru]
            self.queue.append(key)
            self.dict[key] = value



# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
